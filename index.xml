<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simply code - simple code, simple examples, simple explanations</title>
    <link>https://maleck13.github.io/simplycode-me/</link>
    <description>Recent content on Simply code - simple code, simple examples, simple explanations</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 17 Sep 2016 17:54:21 +0100</lastBuildDate>
    <atom:link href="https://maleck13.github.io/simplycode-me/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Accept interfaces return structs</title>
      <link>https://maleck13.github.io/simplycode-me/post/golang/accept-interfaces-return-structs/</link>
      <pubDate>Sat, 17 Sep 2016 17:54:21 +0100</pubDate>
      
      <guid>https://maleck13.github.io/simplycode-me/post/golang/accept-interfaces-return-structs/</guid>
      <description>&lt;p&gt;This post is inspired by a great talk from Dave Cheney on SOLID design in Golang. You can see this talk here &lt;a href=&#34;https://www.youtube.com/watch?v=zzAdEt3xZ1M&#34;&gt;SOLID Design Dave Cheney&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When learning Golang it can be easy to over use some of its features. When you discover interfaces, they are so powerful that, if you&amp;rsquo;re anything like me, you start using them everywhere.
You write a library and accept an interface then you return interfaces as it seems this will help the consumers of your library in writing tests. But this can backfire a little in a way that only
becomes obvious when you are the consumer of such a library.&lt;/p&gt;

&lt;p&gt;If you return an interface from a constructor then you force the user of your library to have to implement each method of that interface in order to create a mock to test with.&lt;/p&gt;

&lt;p&gt;Lets learn and explore this further with an example. Lets assume you are writing an service that needed to connect to a message broker such as activemq.
You find there is a library that helps with this. It looks like this in sudo code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
//responsible for defining how a subscription should be handled
type stompSubscriber interface {
	//accepts a destination /test/test for example a handler function for handling messages from that subscription and any headers you want to override / set
	Subscribe(destination string, handler SubscriptionHandler, headers StompHeaders, receipt *Receipt) (string, error)
	Unsubscribe(subId string, headers StompHeaders, receipt *Receipt) error
	Ack(msg Frame) error
	Nack(msg Frame) error
}

//responsible for defining how a publish should happen
type stompPublisher interface {
	//accepts a body, destination,  headers are optional as is the receipt
	Publish(destination string, body []byte, headers StompHeaders, receipt *Receipt) error
}

//A stomp client is a combination of all of these things
type StompClient interface {
	stompSubscriber
	stompPublisher
}

func New()StompClient{
    //StompClientImpl implements all the methods of the StompClient interface.
    return &amp;amp;StompClientImpl{}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So here we are returning a interface with 5 methods. Note I have ommitted the StompClientImpl code for brevity. Now lets look at what
it is like to use this code as a client:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    func processMessage(sc StompClient, message string)error{
        //some complex business logic
        if err := sc.Publish(&amp;quot;/location&amp;quot;,[]byte(message),nil,nil);err != nil{
            return nil
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok so far so good, but now when we attempt to write a test for this method, even though we are only using one method of the client, we
have to mock all 5 of the methods on the StompClient interface. This is not the end of world but is quite annoying.&lt;/p&gt;

&lt;p&gt;So how do we avoid this? If you return a struct as the client you make this much simpler for users of your library. Because now in order to test it
all they need to do is declare an interface of their own and pass the struct returned from the library as the implementation of this interface:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt; type MessageClient interface{
     Publish(destination string, body []byte, headers client.StompHeaders, receipt *client.Receipt) error
 }

 func processMessage(sc MessageClient, message string)error{
        //some complex business logic
        if err := sc.Publish(&amp;quot;/location&amp;quot;,[]byte(message),nil,nil);err != nil{
            return nil
        }
    }

func main (){
    c := client.New()
    if err := processMessage(c,&amp;quot;a message&amp;quot;); err != nil{
        return err
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now in our tests we have only one method to mock out when testing rather than 5.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Confidence and the software engineer</title>
      <link>https://maleck13.github.io/simplycode-me/post/software-engineering/developer-confidence/</link>
      <pubDate>Sat, 10 Sep 2016 16:05:41 +0100</pubDate>
      
      <guid>https://maleck13.github.io/simplycode-me/post/software-engineering/developer-confidence/</guid>
      <description>

&lt;p&gt;Computers are state machines. Software engineers or, as we are sometimes known, humans are also state machines. For me confidence is the most important of those states for a software engineer. Just as a program can end up in a bad “state” software engineers can also suffer from being in a bad state if they lack confidence. I am not referring only to confidence in ability, but also confidence in decisions made and the finished work produced. I have regularly suffered from a lack of confidence and &lt;a href=&#34;https://en.wikipedia.org/wiki/Impostor_syndrome&#34;&gt;imposter syndrome&lt;/a&gt; throughout my life and my career. This has led me to spending a lot of time thinking about how to stop feeling this way.&lt;/p&gt;

&lt;h3 id=&#34;what-is-confidence-in-the-context-of-software&#34;&gt;What is confidence in the context of software?&lt;/h3&gt;

&lt;p&gt;So what do I actually mean when I say lack confidence. Well lets define what confidence is in the context of software engineering and then we will understand better what the lack of it is. Confidence in software is made up of the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;understanding&lt;/li&gt;
&lt;li&gt;proof&lt;/li&gt;
&lt;li&gt;consensus&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I always find examples useful to illustrate my point. So lets take a simple example. You have been asked to implement a feature that will allow administrators of a business system to find customers within a specified distance from the various stores owned by the business so that they can be invited to a local networking event.
How do the above properties fit in here?&lt;/p&gt;

&lt;h3 id=&#34;understanding&#34;&gt;Understanding&lt;/h3&gt;

&lt;p&gt;Well we must clearly understand requirements in order to have confidence that we can deliver what has been asked of us.
Taking the above feature, what happens when we get to implementing the distance? Is it in miles, kilometers or some other measurement? This is a contrived example, but shows how confusion and uncertainty can begin to creep in and if it creeps into your mind you can be sure it will creep into your code. This uncertainty will manifest itself as code bloat, additional complexity and unneeded additional arguments in your apis.
We must also clearly understand the system we are going to implement this feature within. If we don’t how can we have any confidence that we can deliver on time or deliver it at all?&lt;/p&gt;

&lt;h3 id=&#34;proof&#34;&gt;Proof&lt;/h3&gt;

&lt;p&gt;There is only one way to reliably prove anything in software: Tests,test,tests repeatable and thorough tests. Anything else should be considered transient. Why? Well how will you have confidence that it is still working as expected? How can you have any confidence in anything that is transient?
Tests will help prove that the feature is complete and, just as importantly, they will prove that no one has broken your feature in the future. This builds not only your confidence, but also the confidence of other developer’s as they work around and within the code.
As a side note, for a great piece on what and how to test google has a great &lt;a href=&#34;http://googletesting.blogspot.ie/2015/04/just-say-no-to-more-end-to-end-tests.html&#34;&gt;testing blog post&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;consensus&#34;&gt;Consensus&lt;/h3&gt;

&lt;p&gt;Finally we have consensus. It should be rare that you are working entirely alone on something bigger than a side project. Having peers involved means you can build consensus on solutions to problems. Consensus always builds the confidence of those involved in the group decision; it is a shared goal and a shared responsibility. If you make all the decisions yourself, there is always the opportunity for doubt to creep in. Working alone, you can easily become consequence blind, see things only one way and get sucked down implementation rabbit holes. Another kind of consensus comes from those not involved with the building of the software. Where possible others, who are not directly working on the feature/product should be exposed to what you are doing via demos, user testing and early access. These things will also help build consensus that what you are doing is correct.&lt;/p&gt;

&lt;p&gt;In my experience these are the things that will help build confidence as a software engineer both in your abilities and in the software you build.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Microservices and the api gateway - reducing complexity</title>
      <link>https://maleck13.github.io/simplycode-me/post/software-engineering/microservices-api-gateway/</link>
      <pubDate>Sat, 10 Sep 2016 16:05:41 +0100</pubDate>
      
      <guid>https://maleck13.github.io/simplycode-me/post/software-engineering/microservices-api-gateway/</guid>
      <description>

&lt;p&gt;A common problem/stumbling block when getting started with microservices and general service based architectures, is understanding how you should get those services to work together. When dealing with a distributed system, simplicity is vital. Without simplicity, development time for new features will slowly but surely bloat as will the length of time required for new developers to become productive within the system. Simplicity helps us reason about the overall system and apply common patterns and logic when trying to understand those parts we have not yet seen or are currently being developed. In this post I am going to cover a common pitfall that application designers/developers can fall into that can lead to overly complex and tightly coupled systems I am also going to outline a pattern, the api gateway, that I believe can solve and simplify applications built from microservices.&lt;/p&gt;

&lt;p&gt;Lets get started with a simple example of an application built with microservices. We want a photo site that allows users to upload images and view them later. For this example we will start by having two services that make up our application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;authentication service&lt;/li&gt;
&lt;li&gt;file service
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;authentication-service-v1&#34;&gt;Authentication service v1:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  //
    router.post(&amp;quot;/validate/userid&amp;quot;, function (req,res){
      if(req.params.userid === &amp;quot;joe@smith.com&amp;quot;){
        return res.json({&amp;quot;valid&amp;quot;:true});
      }
      return res.status(401).json({&amp;quot;valid&amp;quot;:false});
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;file-service-v1&#34;&gt;File service v1:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  
  routes.get(&amp;quot;/file/:user/:file&amp;quot;, function (req,res){
      var filePath = config.getPublicDir() + req.params.file;
      fs.createReadStream(filePath).pipe(res);
  });
    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Very straightforward so far. The problem begins once we try to decide how compose these two services together in order to form our application? We could simply call the authentication service via http from the the file service, right? This is ok, but not great, if we don&amp;rsquo;t believe our application&amp;rsquo;s needs will expand beyond authentication and file serving. This is rarely the case for even the most simple real world applications. Already we can see the complexity and knowledge needed to work within the file service application has increased.&lt;/p&gt;

&lt;h5 id=&#34;file-service-v2&#34;&gt;File service v2&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  
  routes.get(&amp;quot;/file/:user/:file&amp;quot;, function (req,res){
  //Tightly bound to authentication service
    authenticationClient.validate(req.params.user, function (err,ok){
      if(err) return res.status(err.status).end();
      fs.createReadStream(req.params.file).pipe(res);
    });
  });
    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So where is the problem? Firstly our file service is now tightly bound to our authentication service. In order to fulfill its api, the file service now always needs a running authentication service. Secondly, what if we want to add a new service into the mix, for example an authorisation service that checks whether the user requesting the file is actually allowed access to the file? Well lets progress our example:&lt;/p&gt;

&lt;h5 id=&#34;authorisation-service-v1&#34;&gt;Authorisation service v1&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  
  routes.get(&amp;quot;/entid/:user/:access&amp;quot;, function (req,res){
    if(req.params.entid === 10 &amp;amp;&amp;amp; user === &amp;quot;joe@smith.com&amp;quot; &amp;amp;&amp;amp; &amp;quot;read&amp;quot; === req.params.access){
      return res.json({&amp;quot;valid&amp;quot;:true});
    }
    res.status(401).json({&amp;quot;valid&amp;quot;:false});
  });
    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our application&amp;rsquo;s services now look like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;authentication service&lt;/li&gt;
&lt;li&gt;authorisation service&lt;/li&gt;
&lt;li&gt;file service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How would we make use of this new service? Well we have already established a pattern of directly calling the service so we could continue this already working pattern and add another coupling to our file service so that it looks like:&lt;/p&gt;

&lt;h5 id=&#34;file-service-v3&#34;&gt;File service v3:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  
  routes.get(&amp;quot;/file/:user/:file&amp;quot;, function (req,res){
  //Tightly bound to authentication service
    authenticationClient.validate(req.params.user, function (err,ok){
      if(err) return res.status(err.status).end();
      //Tightly bound to authorisation service
      authorisationClient.isAuthorised(req.params.user,req.params.file, function (err, ok){
      if(err) return res.status(err.status).end();
        fs.createReadStream(req.params.file).pipe(res);
      });
    });
  });
    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our simple file service is starting to get pretty complicated now. It&amp;rsquo;s more difficult to reason about as it is mixed up with authentication and authorisation, any developer having to work in this code is required to understand several layers before being able to productively and comfortably make changes. It also makes testing our function unnecessarily complicated; we now need to mock out 2 services and maintain these mocks as the services change over the course of time in order to run through the function and hit the unit of work: simply reading a file. So what is the solution to this compexity and tight coupling?&lt;/p&gt;

&lt;h3 id=&#34;api-gateway-to-the-rescue-one-route-to-rule-them-all&#34;&gt;Api Gateway to the rescue. One route to rule them all&lt;/h3&gt;

&lt;p&gt;Adding a new service that will act as a composer and controller of our services can drastically reduce complexity. In microservices this is known as an api gateway. Often these gateways can be leveraged to do more than just compose, but lets stick with the simplicity theme.&lt;/p&gt;

&lt;h3 id=&#34;api-gateway-v1&#34;&gt;api gateway v1&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  
  routes.get(&amp;quot;/file/:user/:file&amp;quot;, function (req,res){
     async.series([
        authenticationClient.validate(req.params.user,callback),
        authorisationClient.isAllowedRead(req.params.user,req.params.file,callback),
        fileClient.getFile(req.params.file,res, callback) // pipes the file to the response
     ], function done (err, ok){
        if(err) res.status(err.status).json(err);
     });
  });
    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our application is now made up of a four services.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gateway&lt;/li&gt;
&lt;li&gt;authentication service&lt;/li&gt;
&lt;li&gt;authorisation service&lt;/li&gt;
&lt;li&gt;file service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our gateway is responsible for exposing the api and bringing together the required services needed to complete this api. Note that there is no business logic here, there is only composition. This means we can now remove the tangle of code from our file service and return it to being only concerned with its own responsibilities, serving files.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>